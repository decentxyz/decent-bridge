// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import {MockEndpoint} from "arshans-forge-toolkit/LzChainSetup.sol";
import {WETH} from "solmate/tokens/WETH.sol";
import {Test} from "forge-std/Test.sol";
import {TestMultichainSetup} from "./common/TestMultichainSetup.sol";
import {LoadDeployedContracts} from "../script/util/LoadDeployedContracts.sol";
import {console2} from "forge-std/console2.sol";

contract GasReport is Test, TestMultichainSetup, LoadDeployedContracts {
    function skipTestCallRetryPayload() public {
        string memory src = "base";
        string memory dst = "zora";
        loadForChain(src);
        loadForChain(dst);
        address srcUa = address(dcntEthLookup[src]);
        address dstUa = address(dcntEthLookup[dst]);
        bytes memory srcPath = abi.encodePacked(srcUa, dstUa);
        MockEndpoint dstEndpoint = lzEndpointLookup[dst];
        switchTo(dst);
        bytes
            memory payload = hex"0100000000000000000000000057bedf28c3cb3f019f40f330a2a2b0e0116aa0c20000000000000001000000000000000000000000ca010ae462e619d3c2b00884800452649b18b5c3000000000007f3d500000000000000000000000000000000000000000000000000000000000000010000000000000000000000005d7370fcd6e446bbc14a64c1effe5fbb1c8932320000000000000000000000003547f3cf6dad2ce64b5c308ebd964822220cf577000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000002644aed0ae80000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000041b9a9c530b2093b8d47328c0113fd67f4c928c6f0a15aa7e7aaf7cb2a83690c5a58f5a90e08c710beb46c429e62071159f0a6c65d860751fd7933d1eed5dd461a1c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        dstEndpoint.retryPayload(lzIdLookup[src], srcPath, payload);
    }

    function testCheckLiquidity() public {
        string memory chain = "zora-goerli";
        loadForChain(chain);
        switchTo(chain);
        WETH w = WETH(payable(wethLookup[chain]));
        uint balance = w.balanceOf(address(routerLookup[chain]));
        console2.log("balance is", balance);
    }
}
